package com.gosun.solr.dao;

import java.io.IOException;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.apache.commons.lang3.StringUtils;
import org.apache.solr.client.solrj.SolrQuery;
import org.apache.solr.client.solrj.SolrRequest.METHOD;
import org.apache.solr.client.solrj.SolrServer;
import org.apache.solr.client.solrj.SolrServerException;
import org.apache.solr.client.solrj.response.FacetField;
import org.apache.solr.client.solrj.response.FacetField.Count;
import org.apache.solr.client.solrj.response.Group;
import org.apache.solr.client.solrj.response.GroupCommand;
import org.apache.solr.client.solrj.response.GroupResponse;
import org.apache.solr.client.solrj.response.PivotField;
import org.apache.solr.client.solrj.response.QueryResponse;
import org.apache.solr.client.solrj.response.UpdateResponse;
import org.apache.solr.common.SolrDocument;
import org.apache.solr.common.SolrDocumentList;
import org.apache.solr.common.SolrInputDocument;
import org.apache.solr.common.util.NamedList;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.gosun.solr.dateconvert.DataConvertChain;
import com.gosun.solr.dateconvert.impl.DefaultDataConverter;
import com.gosun.solr.dateconvert.impl.TimeZoneDataConverter;
import com.gosun.solr.query.param.SolrQueryFacetParam;
import com.gosun.solr.query.param.SolrQueryGroupParam;
import com.gosun.solr.query.param.SolrQueryParam;
import com.gosun.solr.query.result.CommonQueryResult;
import com.gosun.solr.query.result.FacetElementQueryResult;
import com.gosun.solr.query.result.FacetPivotQueryResult;
import com.gosun.solr.query.result.FacetQueryResult;
import com.gosun.solr.query.result.GroupElementQueryResult;
import com.gosun.solr.server.SolrServerFactory;
import com.gosun.util.ReflectUtils;

/**
 * Solr数据通道抽象基类
 * 
 * @author cxp
 */
public abstract class BaseSolrDao<T> {
	/**
	 * Solr操作工具
	 */
	protected SolrServer solrServer;
	protected static final Logger LOGGER = LoggerFactory.getLogger(BaseSolrDao.class);
	/**
	 * 泛型Class
	 */
	protected Class<T> tClass;
	/**
	 * Solr唯一键
	 */
	protected String uniqueKey = "id";
	/**
	 * 数据转换操作链
	 */
	protected DataConvertChain<T> dataConvertChain = new DataConvertChain<T>();

	/**
	 * 按目录优先级，加载配置文件 运行根目录/config > 运行根目录 > classpath目录/config > classpath目录
	 * 
	 */
	@SuppressWarnings("unchecked")
	public BaseSolrDao(String configFileName) {
		// 通过配置文件加载SolrServer
		try {
			solrServer = SolrServerFactory.getSolrServerInstance(configFileName);
		} catch (Exception e) {
			e.printStackTrace();
			LOGGER.error("获取SolrServer时出现异常", e);
		}
		// 获取泛型Class
		if (tClass == null) {
			Type genType = getClass().getGenericSuperclass();
			Type[] params = ((ParameterizedType) genType).getActualTypeArguments();
			tClass = (Class<T>) params[0];
		}

		// 添加数据转换器
		dataConvertChain.addConvert(new TimeZoneDataConverter<T>());
		dataConvertChain.addConvert(new DefaultDataConverter<T>());
	}

	public BaseSolrDao(String solrCloudUrl, String solrCollection, String solrHostUrl) {
		// 通过配置文件加载SolrServer
		try {
			solrServer = SolrServerFactory.getSolrServerInstance(solrCloudUrl, solrCollection, solrHostUrl);
		} catch (Exception e) {
			e.printStackTrace();
			LOGGER.error("获取SolrServer时出现异常", e);
		}
		// 获取泛型Class
		if (tClass == null) {
			Type genType = getClass().getGenericSuperclass();
			Type[] params = ((ParameterizedType) genType).getActualTypeArguments();
			tClass = (Class<T>) params[0];
		}

		// 添加数据转换器
		dataConvertChain.addConvert(new TimeZoneDataConverter<T>());
		dataConvertChain.addConvert(new DefaultDataConverter<T>());
	}

	/**
	 * 基础查询
	 */
	public List<T> list(SolrQueryParam queryParam) {
		assert queryParam != null;

		LOGGER.debug("BaseSolrDao.list");
		LOGGER.debug("参数：" + queryParam);
		SolrQuery query = new SolrQuery();
		queryParam.setSolrQueryParam(query);

		List<T> result = new ArrayList<T>();
		try {
			QueryResponse response = solrServer.query(query, METHOD.POST);
			result = response.getBeans(tClass);
			dataConvertChain.convert(result);
		} catch (SolrServerException e) {
			LOGGER.warn("Solr查询异常", e);
		}

		LOGGER.debug("返回值：" + result);
		return result;
	}

	/**
	 * 查询总数
	 */
	public long count(SolrQueryParam queryParam) {
		assert queryParam != null;

		queryParam.setRows(0);
		queryParam.setStart(0);
		LOGGER.debug("BaseSolrDao.list");
		LOGGER.debug("参数：" + queryParam);
		SolrQuery query = new SolrQuery();
		queryParam.setSolrQueryParam(query);

		long result = 0;
		try {
			QueryResponse response = solrServer.query(query, METHOD.POST);
			result = response.getResults().getNumFound();
		} catch (SolrServerException e) {
			LOGGER.warn("Solr查询异常", e);
		}

		LOGGER.debug("返回值：" + result);
		return result;
	}

	/**
	 * 基础查询，附带查询总量，以QueryResult的形式返回
	 */
	public CommonQueryResult<T> listToQueryResult(SolrQueryParam queryParam) {
		assert queryParam != null;

		LOGGER.debug("BaseSolrDao.listToQueryResult");
		LOGGER.debug("参数：" + queryParam);
		SolrQuery query = new SolrQuery();
		queryParam.setSolrQueryParam(query);

		CommonQueryResult<T> result = new CommonQueryResult<T>();
		try {
			QueryResponse response = solrServer.query(query, METHOD.POST);
			List<T> list = response.getBeans(tClass);
			dataConvertChain.convert(list);
			result.setAmounts(response.getResults().getNumFound());
			result.setBeans(list);
		} catch (SolrServerException e) {
			LOGGER.warn("Solr查询异常", e);
		}

		LOGGER.debug("返回值：" + result);
		return result;
	}

	/**
	 * 通过uniqueKey获取对应的document
	 * 
	 * @param value
	 *            不能为null
	 */
	public T getByUniqueKey(String id) {
		assert StringUtils.isNotBlank(id);

		String condition = uniqueKey + ":" + id;
		SolrQuery query = new SolrQuery();
		query.setQuery(condition);
		query.setRows(1);
		LOGGER.debug("BaseSolrDao.getByUniqueKey");
		LOGGER.debug("参数：" + condition);

		T result = null;
		try {
			QueryResponse response = solrServer.query(query, METHOD.POST);
			List<T> beans = response.getBeans(tClass);
			result = beans.get(0);
			dataConvertChain.convert(result);
		} catch (SolrServerException e) {
			LOGGER.warn("Solr查询异常", e);
		}

		LOGGER.debug("返回值：" + result);
		return result;
	}

	/**
	 * 构面查询 Solr4.7.2没有提供多字段构面，对于输入多个构面字段时，会按着每个分组字段各自组成构面
	 * 
	 * @return {“facetField1”:List<Count>,"facetField2":List<Count>...}
	 */
	public List<FacetQueryResult> listFacet(SolrQueryFacetParam facetParam) {
		assert facetParam != null;

		facetParam.setRows(0);// 限制document返回，降低网络压力
		LOGGER.debug("BaseSolrDao.listFacet");
		LOGGER.debug("参数：" + facetParam);
		SolrQuery query = new SolrQuery();
		facetParam.setSolrQueryParam(query);

		List<FacetQueryResult> result = new LinkedList<FacetQueryResult>();

		try {
			QueryResponse response = solrServer.query(query, METHOD.POST);
			List<String> facetFieldList = facetParam.getFacetFieldList();
			for (String facetField : facetFieldList) {
				FacetQueryResult facet = new FacetQueryResult().setFacetField(facetField);
				List<Count> counts = response.getFacetField(facetField).getValues();
				List<FacetElementQueryResult> elements = new LinkedList<>();
				for (Count count : counts) {
					elements.add(new FacetElementQueryResult().setValue(count.getName()).setCount(count.getCount()));
				}
				facet.setElements(elements);

				result.add(facet);
			}

		} catch (SolrServerException e) {
			LOGGER.warn("Solr查询异常", e);
		}

		LOGGER.debug("返回值：" + result);
		return result;
	}

	/**
	 * 查询单一构面总数量 使用facetParam.getFacetFieldList().get(0)作为facet.field
	 */
	public int countSingleFacet(SolrQueryFacetParam facetParam) {
		assert facetParam != null;

		facetParam.setFacetRows(-1)// 无限制
				.setFacetStart(0)// 从0开始
				.setRows(0);// 限制document返回，降低网络压力

		LOGGER.debug("BaseSolrDao.countSingleFacet");
		LOGGER.debug("参数：" + facetParam);
		SolrQuery query = new SolrQuery();
		facetParam.setSolrQueryParam(query);

		int result = -1;
		QueryResponse response;
		try {
			response = solrServer.query(query, METHOD.POST);
			List<String> facetFieldList = facetParam.getFacetFieldList();
			if (facetFieldList != null && facetFieldList.size() > 0) {
				result = response.getFacetField(facetFieldList.get(0)).getValueCount();
			}
		} catch (SolrServerException e) {
			LOGGER.warn("Solr查询异常", e);
		}

		LOGGER.debug("返回值：" + result);
		return result;
	}

	/**
	 * 单一构面查询 使用facetParam.getFacetFieldList().get(0)作为facet.field
	 */
	public List<FacetElementQueryResult> listSingleFacet(SolrQueryFacetParam facetParam) {
		assert facetParam != null;

		facetParam.setRows(0);// 限制document返回，降低网络压力
		LOGGER.debug("BaseSolrDao.listSingleFacet");
		LOGGER.debug("参数：" + facetParam);
		SolrQuery query = new SolrQuery();
		facetParam.setSolrQueryParam(query);

		List<FacetElementQueryResult> result = new LinkedList<FacetElementQueryResult>();
		try {
			QueryResponse response = solrServer.query(query, METHOD.POST);
			List<String> facetFieldList = facetParam.getFacetFieldList();
			if (facetFieldList != null && facetFieldList.size() > 0) {
				List<Count> counts = response.getFacetField(facetFieldList.get(0)).getValues();
				for (Count count : counts) {
					result.add(new FacetElementQueryResult().setCount(count.getCount()).setValue(count.getName()));
				}
			}
		} catch (SolrServerException e) {
			LOGGER.warn("Solr查询异常", e);
		}

		LOGGER.debug("返回值：" + result);
		return result;
	}

	/**
	 * 使用Date类型字段的构面查询 设置facet.date参数为dataFacet
	 */
	public List<FacetElementQueryResult> listDateFacet(SolrQueryFacetParam facetParam) {
		assert facetParam != null;

		facetParam.setRows(0);// 限制document返回，降低网络压力
		LOGGER.debug("BaseSolrDao.listDateFacet");
		LOGGER.debug("参数：" + facetParam);
		SolrQuery query = new SolrQuery();
		facetParam.setSolrQueryParam(query);

		List<FacetElementQueryResult> result = new LinkedList<FacetElementQueryResult>();
		try {
			QueryResponse response = solrServer.query(query, METHOD.POST);
			String dateFacet = facetParam.getDateFacet();
			if (StringUtils.isNotBlank(dateFacet)) {
				List<Count> counts = response.getFacetDate(dateFacet).getValues();
				for (Count count : counts) {
					result.add(new FacetElementQueryResult().setCount(count.getCount()).setValue(count.getName()));
				}
			}
		} catch (SolrServerException e) {
			LOGGER.warn("Solr查询异常", e);
		}

		LOGGER.debug("返回值：" + result);
		return result;
	}

	/**
	 * 使用FacetQuery自定义条件查询
	 */
	public List<FacetElementQueryResult> listQueryFacet(SolrQueryFacetParam facetParam) {
		assert facetParam != null;

		facetParam.setRows(0);// 限制document返回，降低网络压力
		LOGGER.debug("BaseSolrDao.listQueryFacet");
		LOGGER.debug("参数：" + facetParam);
		SolrQuery query = new SolrQuery();
		facetParam.setSolrQueryParam(query);
		List<FacetElementQueryResult> result = new LinkedList<FacetElementQueryResult>();
		try {
			QueryResponse response = solrServer.query(query, METHOD.POST);
			Map<String, Integer> facetQueryResultMap = response.getFacetQuery();
			for (Map.Entry<String, Integer> facetQueryResult : facetQueryResultMap.entrySet()) {
				result.add(new FacetElementQueryResult().setCount(facetQueryResult.getValue())
						.setValue(facetQueryResult.getKey()));
			}
		} catch (SolrServerException e) {
			LOGGER.warn("Solr查询异常", e);
		}

		LOGGER.debug("返回值：" + result);
		return result;
	}

	/**
	 * 深度构面查询
	 * 
	 */
	public List<FacetPivotQueryResult> listPivotFacet(SolrQueryFacetParam facetParam) {
		assert facetParam != null;

		facetParam.setRows(0);// 限制document返回，降低网络压力
		LOGGER.debug("BaseSolrDao.listPivotFacet");
		LOGGER.debug("参数：" + facetParam);
		SolrQuery query = new SolrQuery();
		facetParam.setSolrQueryParam(query);
		List<FacetPivotQueryResult> result = new LinkedList<FacetPivotQueryResult>();
		try {
			QueryResponse response = solrServer.query(query, METHOD.POST);
			NamedList<List<PivotField>> pivotsMap = response.getFacetPivot(); // 多个深度构面
			for (Entry<String, List<PivotField>> pivots : pivotsMap) {
				for (PivotField pivot : pivots.getValue()) {
					FacetPivotQueryResult facetPivotQueryResult = getPivotResult(pivot);
					result.add(facetPivotQueryResult);
					System.out.println("asd");
				}
			}
		} catch (SolrServerException e) {
			LOGGER.warn("Solr查询异常", e);
		}

		LOGGER.debug("返回值：" + result);
		return result;
	}

	/**
	 * 分组查询 Solr4.7.2没有提供多字段分组，对于输入多个分组字段时，会按着每个分组字段各自组成分组
	 * 从0.0.2以后过期，请使用listGroupToGroupQueryResult
	 * 
	 * @return {"groupValue1":List<T>,"groupValue2":List<T>}
	 */
	@Deprecated
	public Map<String, List<T>> listGroup(SolrQueryGroupParam groupParam) {
		assert groupParam != null;

		LOGGER.debug("BaseSolrDao.listGroup");
		LOGGER.debug("参数：" + groupParam);
		SolrQuery query = new SolrQuery();
		groupParam.setSolrQueryParam(query);

		Map<String, List<T>> result = new HashMap<String, List<T>>();
		try {
			QueryResponse response = solrServer.query(query, METHOD.POST);
			GroupResponse groupResponse = response.getGroupResponse();
			List<GroupCommand> groupCommandList = groupResponse.getValues();
			for (GroupCommand groupCommand : groupCommandList) {
				List<Group> groupList = groupCommand.getValues();
				for (Group group : groupList) {
					List<T> beanListOfGroup = new LinkedList<T>();
					String groupValue = group.getGroupValue();
					SolrDocumentList solrDocumentList = group.getResult();
					for (SolrDocument document : solrDocumentList) {
						try {
							T bean = (T) tClass.newInstance();
							// 解析注解，将solr document注入到bean中
							for (Field field : tClass.getDeclaredFields()) {
								org.apache.solr.client.solrj.beans.Field fieldOfSolr = field
										.getAnnotation(org.apache.solr.client.solrj.beans.Field.class);
								if (fieldOfSolr == null || StringUtils.isBlank(fieldOfSolr.value()))
									continue;
								String fieldNameOfSolr = fieldOfSolr.value();
								if ("#default".equals(fieldNameOfSolr)) {
									fieldNameOfSolr = field.getName();
								}
								Method setMethod = ReflectUtils.obtainSetter(tClass, field);
								Object value = document.get(fieldNameOfSolr);
								if (value != null)
									setMethod.invoke(bean, value);
							}
							beanListOfGroup.add(bean);
						} catch (NoSuchMethodException e) {
							LOGGER.warn("反射获取setter异常", e);
						} catch (SecurityException e) {
							LOGGER.warn("反射获取setter异常", e);
						} catch (IllegalArgumentException e) {
							LOGGER.warn("反射调用setter异常", e);
						} catch (InvocationTargetException e) {
							LOGGER.warn("反射调用setter异常", e);
						} catch (InstantiationException e) {
							LOGGER.warn("反射生成实体类" + tClass + "异常", e);
						} catch (IllegalAccessException e) {
							LOGGER.warn("反射生成实体类" + tClass + "异常", e);
						}
					}
					// 数据转换
					dataConvertChain.convert(beanListOfGroup);
					result.put(groupValue, beanListOfGroup);
				}
			}
		} catch (SolrServerException e) {
			LOGGER.warn("Solr查询异常", e);
		}

		LOGGER.debug("返回值：" + result);
		return result;
	}

	/**
	 * 分组查询，以GroupQueryResult的形式返还
	 */
	public List<GroupElementQueryResult<T>> listGroupToGroupQueryResult(SolrQueryGroupParam groupParam) {
		assert groupParam != null;

		LOGGER.debug("BaseSolrDao.listGroupToGroupQueryResult");
		LOGGER.debug("参数：" + groupParam);
		SolrQuery query = new SolrQuery();
		groupParam.setSolrQueryParam(query);

		List<GroupElementQueryResult<T>> result = new LinkedList<GroupElementQueryResult<T>>();
		try {
			QueryResponse response = solrServer.query(query, METHOD.POST);
			GroupResponse groupResponse = response.getGroupResponse();
			List<GroupCommand> groupCommandList = groupResponse.getValues();
			for (GroupCommand groupCommand : groupCommandList) {
				List<Group> groupList = groupCommand.getValues();
				for (Group group : groupList) {
					List<T> beanListOfGroup = new LinkedList<T>();
					String groupValue = group.getGroupValue();
					SolrDocumentList solrDocumentList = group.getResult();
					for (SolrDocument document : solrDocumentList) {
						try {
							T bean = (T) tClass.newInstance();
							// 解析注解，将solr document注入到bean中
							for (Field field : tClass.getDeclaredFields()) {
								org.apache.solr.client.solrj.beans.Field fieldOfSolr = field
										.getAnnotation(org.apache.solr.client.solrj.beans.Field.class);
								if (fieldOfSolr == null || StringUtils.isBlank(fieldOfSolr.value()))
									continue;
								String fieldNameOfSolr = fieldOfSolr.value();
								if ("#default".equals(fieldNameOfSolr)) {
									fieldNameOfSolr = field.getName();
								}
								Method setMethod = ReflectUtils.obtainSetter(tClass, field);
								Object value = document.get(fieldNameOfSolr);
								if (value != null)
									setMethod.invoke(bean, value);

							}
							beanListOfGroup.add(bean);
						} catch (NoSuchMethodException e) {
							LOGGER.warn("反射获取setter异常", e);
						} catch (SecurityException e) {
							LOGGER.warn("反射获取setter异常", e);
						} catch (IllegalArgumentException e) {
							LOGGER.warn("反射调用setter异常", e);
						} catch (InvocationTargetException e) {
							LOGGER.warn("反射调用setter异常", e);
						} catch (InstantiationException e) {
							LOGGER.warn("反射生成实体类" + tClass + "异常", e);
						} catch (IllegalAccessException e) {
							LOGGER.warn("反射生成实体类" + tClass + "异常", e);
						}
					}
					// 数据转换
					dataConvertChain.convert(beanListOfGroup);

					GroupElementQueryResult<T> groupElement = new GroupElementQueryResult<T>();
					groupElement.setGroupAmounts(group.getResult().getNumFound());
					groupElement.setGroupValue(groupValue);
					groupElement.setGroupBeans(beanListOfGroup);
					result.add(groupElement);
				}
			}
		} catch (SolrServerException e) {
			LOGGER.warn("Solr查询异常", e);
		}

		LOGGER.debug("返回值：" + result);
		return result;
	}

	/**
	 * 更新数据
	 */
	public boolean updateAll(List<T> tList) {
		dataConvertChain.reconvert(tList);

		Collection<SolrInputDocument> updateDocCollection = new LinkedList<SolrInputDocument>();
		for (T t : tList) {
			// 一个实体实例对应一个doc
			SolrInputDocument doc = new SolrInputDocument();
			try {
				for (Field field : tClass.getDeclaredFields()) {
					org.apache.solr.client.solrj.beans.Field fieldOfSolr = field
							.getAnnotation(org.apache.solr.client.solrj.beans.Field.class);
					if (fieldOfSolr == null || StringUtils.isBlank(fieldOfSolr.value())) {
						continue;
					}
					String fieldNameOfSolr = fieldOfSolr.value();
					if ("#default".equals(fieldNameOfSolr)) {
						fieldNameOfSolr = field.getName();
					}
					Method getMethod = ReflectUtils.obtainGetter(tClass, field);
					Object value = getMethod.invoke(t);
					if (value == null) {
						continue;
					}
					if (uniqueKey.equals(fieldNameOfSolr)) {
						// 主键标识
						doc.addField(uniqueKey, value);
					} else {
						Map<String, Object> map = new HashMap<String, Object>();
						map.put("set", value);
						doc.addField(fieldNameOfSolr, map);
					}
					if (doc.containsKey(uniqueKey)) {
						updateDocCollection.add(doc);
					}
				}
			} catch (SecurityException e) {
				LOGGER.warn("反射获取getter异常", e);
			} catch (NoSuchMethodException e) {
				LOGGER.warn("反射获取getter异常", e);
			} catch (IllegalArgumentException e) {
				LOGGER.warn("反射调用getter异常", e);
			} catch (IllegalAccessException e) {
				LOGGER.warn("反射调用getter异常", e);
			} catch (InvocationTargetException e) {
				LOGGER.warn("反射调用getter异常", e);
			}
		}

		// 更新doc
		try {
			if (updateDocCollection.size() != 0) {
				solrServer.add(updateDocCollection);
				UpdateResponse response = solrServer.commit();
				return response.getStatus() == 0 ? true : false;
			} else {
				return true;
			}
		} catch (SolrServerException e) {
			LOGGER.warn("SolrServer添加document异常", e);
		} catch (IOException e) {
			LOGGER.warn("SolrServer添加document异常", e);
		}

		return false;
	}

	/**
	 * 更新数据
	 */
	public boolean update(T t) {
		dataConvertChain.reconvert(t);
		List<T> tList = new LinkedList<T>();
		tList.add(t);
		return updateAll(tList);
	}

	/**
	 * 插入数据
	 */
	public boolean save(T t) {
		dataConvertChain.reconvert(t);
		try {
			UpdateResponse response = solrServer.addBean(t);
			solrServer.commit();
			return response.getStatus() == 0 ? true : false;
		} catch (IOException | SolrServerException e) {
			LOGGER.warn("SolrServer插入数据异常", e);
		}
		return false;
	}

	/**
	 * 插入数据
	 */
	public boolean saveAll(Collection<T> tCollection) {
		if(tCollection==null || tCollection.size()==0){
			return true;
		}
		dataConvertChain.reconvert(tCollection);
		try {
			UpdateResponse response = solrServer.addBeans(tCollection);
			solrServer.commit();
			return response.getStatus() == 0 ? true : false;
		} catch (IOException | SolrServerException e) {
			LOGGER.warn("SolrServer插入数据异常", e);
		}
		return false;
	}

	/**
	 * 通过uniqueKey删除数据
	 */
	public boolean remove(T t) {
		Field uniqueKeyField = null;
		for (Field field : tClass.getDeclaredFields()) {
			org.apache.solr.client.solrj.beans.Field fieldOfSolr = field
					.getAnnotation(org.apache.solr.client.solrj.beans.Field.class);
			if (fieldOfSolr == null || StringUtils.isBlank(fieldOfSolr.value())) {
				continue;
			}
			String fieldNameOfSolr = fieldOfSolr.value();
			if ("#default".equals(fieldNameOfSolr)) {
				fieldNameOfSolr = field.getName();
			}
			if (uniqueKey.equals(fieldNameOfSolr)) {
				// 主键标识
				uniqueKeyField = field;
				break;
			}
		}
		if (uniqueKeyField == null) {
			LOGGER.warn("获取uniquekey域异常，不存在对应的uniquekey域");
			return false;
		}
		Object id = null;
		try {
			Method getter = ReflectUtils.obtainGetter(tClass, uniqueKeyField);
			id = getter.invoke(t);
		} catch (NoSuchMethodException | SecurityException e) {
			LOGGER.warn("获取uniquekey域异常", e);
			return false;
		} catch (IllegalAccessException e) {
			LOGGER.warn("获取uniquekey值异常", e);
			return false;
		} catch (IllegalArgumentException e) {
			LOGGER.warn("获取uniquekey值异常", e);
			return false;
		} catch (InvocationTargetException e) {
			LOGGER.warn("获取uniquekey值异常", e);
			return false;
		}
		return removeByUniqueKey(id.toString());
	}

	/**
	 * 通过uniqueKey删除数据
	 */
	public boolean removeByUniqueKey(String id) {
		try {
			UpdateResponse response = solrServer.deleteById(id);
			solrServer.commit();
			return response.getStatus() == 0 ? true : false;
		} catch (SolrServerException | IOException e) {
			LOGGER.warn("SolrServer删除数据异常", e);
		}
		return false;
	}

	/**
	 * 通过uniqueKey删除数据
	 */
	public boolean removeByUniqueKey(List<String> ids) {
		try {
			UpdateResponse response = solrServer.deleteById(ids);
			solrServer.commit();
			return response.getStatus() == 0 ? true : false;
		} catch (SolrServerException | IOException e) {
			LOGGER.warn("SolrServer删除数据异常", e);
		}
		return false;
	}

	/**
	 * 通过条件查询，删除数据
	 */
	public boolean removeByCondition(String condition) {
		try {
			UpdateResponse response = solrServer.deleteByQuery(condition);
			solrServer.commit();
			return response.getStatus() == 0 ? true : false;
		} catch (SolrServerException | IOException e) {
			LOGGER.warn("SolrServer删除数据异常", e);
		}
		return false;
	}

	public String getUniqueKey() {
		return uniqueKey;
	}

	public void setUniqueKey(String uniqueKey) {
		this.uniqueKey = uniqueKey;
	}

	/**
	 * 递归获取深度构面结果集
	 */
	private FacetPivotQueryResult getPivotResult(PivotField pivot) {
		if (pivot.getPivot() == null || pivot.getPivot().isEmpty()) {
			// 不存在下一层
			return new FacetPivotQueryResult().setValue(pivot.getValue()).setCount((long) pivot.getCount());
		}

		FacetPivotQueryResult result = new FacetPivotQueryResult();
		result.setValue(pivot.getValue()).setCount((long) pivot.getCount());
		// 获取下一层
		for (PivotField nextPivot : pivot.getPivot()) {
			FacetPivotQueryResult next = getPivotResult(nextPivot);
			result.addNext(next);
		}
		return result;
	}
}
